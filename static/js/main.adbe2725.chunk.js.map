{"version":3,"sources":["images/logo-covid-white.svg","images/sad.svg","images/smile.svg","images/crying.svg","images/banner-covid1.jpg","images/banner-covid2.jpg","config/api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API","baseUrl","rapidapi_host","rapidapi_key","App","props","state","members","axios","get","then","response","console","log","setState","data","catch","err","className","src","logo","alt","id","data-ride","data-target","data-slide-to","slide1","slide2","this","map","member","index","key","country","cases","total","new","sad","active","smile","recovered","crying","deaths","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,2C,+RCA9BC,EACD,CACRC,QAAS,8CACTC,cAAe,2BACfC,aAAc,sD,kCCwJHC,E,kDA9Ib,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,IAHM,E,gEA2BE,IAAD,OAClBC,IAAMC,IAAN,UAAaT,EAAaC,QAA1B,sBAAuD,CACrD,OAAU,MACV,QAAW,CACT,kBAAmBD,EAAaE,cAChC,iBAAkBF,EAAaG,gBAIlCO,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACP,QAAQI,EAASI,KAAKJ,cAGtCK,OAAM,SAAAC,GACLL,QAAQC,IAAII,Q,+BAQd,OAEE,oCACI,yBAAKC,UAAU,sCACb,uBAAGA,UAAU,gBAAe,yBAAKC,IAAKC,IAAMC,IAAI,eAGlD,yBAAKH,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKI,GAAG,aAAaJ,UAAU,iBAAiBK,YAAU,YACxD,wBAAIL,UAAU,uBACZ,wBAAIM,cAAY,cAAcC,gBAAc,IAAIP,UAAU,WAC1D,wBAAIM,cAAY,cAAcC,gBAAc,OAE9C,yBAAKP,UAAU,kBACb,yBAAKA,UAAU,wBACb,yBACIA,UAAU,UACVC,IAAKO,IACLL,IAAI,cAGV,yBAAKH,UAAU,iBACb,yBACIA,UAAU,UACVC,IAAKQ,IACLN,IAAI,kBAQlB,yBAAKH,UAAU,OACb,yBAAKA,UAAU,aACb,2BAAOA,UAAU,qBAAjB,qCAIJ,yBAAKA,UAAU,OACZU,KAAKtB,MAAMC,QAAQsB,KAAI,SAACC,EAAQC,GAAT,OACtB,yBAAKb,UAAU,YAAYc,IAAKF,EAAOG,SAErC,yBAAKf,UAAU,0BAAf,iBACiBY,EAAOI,MAAMC,MAD9B,mBAEgBL,EAAOI,MAAME,KAG7B,yBAAKlB,UAAU,0BACb,yBAAKA,UAAU,SACX,yBAAKC,IAAKkB,IAAKhB,IAAI,oBACnB,yBAAKH,UAAU,cAAf,oBAEI,4BAAKY,EAAOI,MAAMI,WAK5B,yBAAKpB,UAAU,0BACb,yBAAKA,UAAU,SACb,yBAAKC,IAAKoB,IAAOlB,IAAI,oBACnB,yBAAKH,UAAU,cAAf,WAEI,4BAAKY,EAAOI,MAAMM,cAK5B,yBAAKtB,UAAU,0BACb,yBAAKA,UAAU,SACb,yBAAKC,IAAKsB,IAAQpB,IAAI,oBACpB,yBAAKH,UAAU,cAAf,oBAEI,4BAAKY,EAAOY,OAAOP,gBAUrC,yBAAKjB,UAAU,UACX,qC,GA1IIyB,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.adbe2725.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-covid-white.24c5f6f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/sad.8f3e4845.svg\";","module.exports = __webpack_public_path__ + \"static/media/smile.c466092e.svg\";","module.exports = __webpack_public_path__ + \"static/media/crying.9a9725fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/banner-covid1.5848954d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/banner-covid2.f8ea7218.jpg\";","export const API = {\n  rapidapi: {\n    baseUrl: 'https://covid-193.p.rapidapi.com/statistics',\n    rapidapi_host: 'covid-193.p.rapidapi.com',\n    rapidapi_key: '396f3135b4msh0f4046d1bce5308p1ac8a7jsn14095db32b8d'\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport logo from '../src/images/logo-covid-white.svg';\nimport sad from '../src/images/sad.svg';\nimport smile from '../src/images/smile.svg';\nimport crying from '../src/images/crying.svg';\nimport {API} from '../src/config/api';\n\nimport slide1 from '../src/images/banner-covid1.jpg';\nimport slide2 from '../src/images/banner-covid2.jpg';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      members: []\n    };\n  }\n\n  // componentDidMount (){\n  //   axios.get('https://covid-193.p.rapidapi.com/statistics?country=indonesia', {\n  //     \"method\": \"GET\",\n  //     \"headers\": {\n  //       \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\n  //       \"x-rapidapi-key\": \"396f3135b4msh0f4046d1bce5308p1ac8a7jsn14095db32b8d\"\n  //     }\n  //   })\n\n  //   .then(response => {\n  //     console.log(response);\n  //     this.setState({members:response.data.response});\n  //   })\n\n  //   .catch(err => {\n  //     console.log(err);\n  //   });\n  // }\n\n\n  componentDidMount (){\n    axios.get(`${API.rapidapi.baseUrl}?country=indonesia`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": API.rapidapi.rapidapi_host,\n        \"x-rapidapi-key\": API.rapidapi.rapidapi_key\n      }\n    })\n\n    .then(response => {\n      console.log(response);\n      this.setState({members:response.data.response});\n    })\n\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n\n  \n\n  render() {\n    return (\n\n      <>\n          <nav className=\"navbar navbar-light bg-header mb-3\">\n            <a className=\"navbar-brand\"><img src={logo} alt='covid 19' /></a>\n          </nav>\n\n          <div className=\"container\">\n            <div className='row'>\n              <div className='col-md-12'>\n                <div id=\"homeBanner\" className=\"carousel slide\" data-ride=\"carousel\">\n                  <ol className=\"carousel-indicators\">\n                    <li data-target=\"#homeBanner\" data-slide-to=\"0\" className=\"active\"></li>\n                    <li data-target=\"#homeBanner\" data-slide-to=\"1\"></li>\n                  </ol>\n                  <div className=\"carousel-inner\">\n                    <div className=\"carousel-item active\">\n                      <img\n                          className='rounded' \n                          src={slide1}\n                          alt=\"covid-19\"\n                      />\n                    </div>\n                    <div className=\"carousel-item\">\n                      <img \n                          className='rounded'\n                          src={slide2}\n                          alt=\"covid-19\"\n                      />\n                    </div>\n                  </div>\n                </div>    \n              </div>\n            </div>\n\n            <div className='row'>\n              <div className='col-md-12'>\n                <small className='d-block mt-5 mb-2'>Data diperbarui setiap 15 menit</small>\n              </div>\n            </div>\n\n            <div className='row'>\n              {this.state.members.map((member, index) => (\n                <div className=\"col-md-12\" key={member.country}>\n                  \n                  <div className='p-3 bg-purple list-box'>\n                    Total Kasus : {member.cases.total} |\n                    Kasus Baru : {member.cases.new}\n                  </div>\n\n                  <div className='p-3 bg-purple list-box'>\n                    <div className=\"media\">\n                        <img src={sad} alt='Dalam Perawatan'/>\n                        <div className=\"media-body\">\n                            Dalam Perawatan :\n                            <h4>{member.cases.active}</h4>\n                        </div>\n                    </div>\n                  </div>\n\n                  <div className='p-3 bg-purple list-box'>\n                    <div className=\"media\">\n                      <img src={smile} alt='Dalam Perawatan'/>\n                        <div className=\"media-body\">\n                            Sembuh :\n                            <h4>{member.cases.recovered}</h4>\n                        </div>\n                    </div>\n                  </div>\n\n                  <div className='p-3 bg-purple list-box'>\n                    <div className=\"media\">\n                      <img src={crying} alt='Dalam Perawatan'/>\n                        <div className=\"media-body\">\n                            Total Meninggal :\n                            <h4>{member.deaths.total}</h4>\n                        </div>\n                    </div>\n                  </div>\n\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div className='footer'>\n              <span></span>\n          </div>\n      </>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}